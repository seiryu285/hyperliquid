name: HyperLiquid Agent CI/CD

on:
  push:
    branches: [ main, master, feature/*, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
      redis:
        image: redis:6
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f project_root/requirements.txt ]; then pip install -r project_root/requirements.txt; fi
        pip install pytest pytest-cov pytest-asyncio
        
    - name: Create .env file
      run: |
        cd project_root
        cp .env.example .env
        # Set dummy values for testing
        echo "HYPERLIQUID_API_KEY=test_key" >> .env
        echo "HYPERLIQUID_API_SECRET=test_secret" >> .env
        
    - name: Run tests
      run: |
        cd project_root
        python -m pytest tests/unit tests/integration --cov=. --cov-report=xml
        
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./project_root/coverage.xml
        fail_ci_if_error: false

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: ./project_root
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/hyperliquid-agent:latest
        
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production server..."
        # Add deployment scripts here
